buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
	}
}

tasks.withType(Javadoc) {
	enabled = false
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

ext {
	bintrayRepo = 'maven'
	bintrayName = 'viewpager-dialog'

	publishedGroupId = 'org.neidhardt'
	libraryName = 'viewpager-dialog'
	artifact = 'viewpager-dialog'

	libraryDescription = 'standard dialog with viewpager'

	siteUrl = 'https://github.com/CombatMage/viewpager-dialog'
	gitUrl = 'https://github.com/CombatMage/viewpager-dialog.git'

	libraryVersion = '1.0.3'

	developerId = 'combatmage'
	developerName = 'Eric Neidhardt'
	developerEmail = 'eric.neidhardt@gmail.com'

	licenseName = 'The Apache Software License, Version 2.0'
	licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	allLicenses = ["Apache-2.0"]
}

android {
	compileSdkVersion rootProject.ext.compileSdkVersion
	buildToolsVersion rootProject.ext.buildToolsVersion

	defaultConfig {
		minSdkVersion project.projectMinSdkVersion
		targetSdkVersion project.projectTargetSdkVersion
	}
	buildTypes {
		release {
			minifyEnabled false
		}
	}
	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
		debug.java.srcDirs += 'src/debug/kotlin'
		release.java.srcDirs += 'src/release/kotlin'
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])

	compile rootProject.ext.libraries.kotlin

	//android support libs
	compile rootProject.ext.libraries.supportV4
	compile rootProject.ext.libraries.supportV13
	compile rootProject.ext.libraries.supportRecyclerView
	compile rootProject.ext.libraries.supportAppCompat
	compile rootProject.ext.libraries.supportDesign

	//RxAndroid
	compile rootProject.ext.libraries.rxAndroid
	compile rootProject.ext.libraries.rxKotlin
	compile rootProject.ext.libraries.rxJava

	//Testing
	testCompile rootProject.ext.libraries.junit
	testCompile rootProject.ext.libraries.mockito
	testCompile rootProject.ext.libraries.robolectric
	testCompile rootProject.ext.libraries.robolectricMultidex
	testCompile rootProject.ext.libraries.robolectricSupportV4
}


apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId // Maven Group ID for the artifact

install {
	repositories.mavenInstaller {
		// This generates POM.xml with proper parameters
		pom {
			project {
				packaging 'aar'
				groupId publishedGroupId
				artifactId artifact

				// Add your description here
				name libraryName
				description libraryDescription
				url siteUrl

				// Set your license
				licenses {
					license {
						name licenseName
						url licenseUrl
					}
				}
				developers {
					developer {
						id developerId
						name developerName
						email developerEmail
					}
				}
				scm {
					connection gitUrl
					developerConnection gitUrl
					url siteUrl

				}
			}
		}
	}
}

// Bintray section
// As long as you add bintray.user and bintray.apikey to the local.properties
// file, you shouldn't have to change anything here. The reason you
// don't just write them here is so that they won't be publicly visible
// in GitHub or wherever your source control is.

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from android.sourceSets.main.java.srcDirs
	}

	task javadoc(type: Javadoc) {
		source = android.sourceSets.main.java.srcDirs
		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	}
} else { // Java libraries
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	user = properties.getProperty("bintray.user")
	key = properties.getProperty("bintray.apikey")

	configurations = ['archives']
	pkg {
		repo = bintrayRepo
		name = bintrayName
		desc = libraryDescription
		websiteUrl = siteUrl
		vcsUrl = gitUrl
		licenses = allLicenses
		publish = true
		publicDownloadNumbers = true
		version {
			desc = libraryDescription
			gpg {
				// optional GPG encryption. Default is false.
				sign = false
				//passphrase = properties.getProperty("bintray.gpg.password")
			}
		}
	}
}